//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 02.04.2014 1:33:09
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace PgEFModel
{

    [DatabaseAttribute(Name = "pgef")]
    [ProviderAttribute(typeof(Devart.Data.PostgreSql.Linq.Provider.PgSqlDataProvider))]
    public abstract partial class DataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(DataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertClient(Client instance);
        partial void UpdateClient(Client instance);
        partial void DeleteClient(Client instance);
        partial void InsertPayment(Payment instance);
        partial void UpdatePayment(Payment instance);
        partial void DeletePayment(Payment instance);

        #endregion

        public DataContext() :
        base(GetConnectionString("DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public DataContext(MappingSource mappingSource) :
        base(GetConnectionString("DataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Client> Clients
        {
            get
            {
                return this.GetTable<Client>();
            }
        }

        public Devart.Data.Linq.Table<Payment> Payments
        {
            get
            {
                return this.GetTable<Payment>();
            }
        }
    }
}

namespace PgEFModel
{

    /// <summary>
    /// There are no comments for PgEFModel.Client in the schema.
    /// </summary>
    [Table(Name = @"public.client")]
    public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Email;
        #pragma warning restore 0649

        private EntitySet<Payment> _Payments;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        #endregion

        public Client()
        {
            this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "serial NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", DbType = "varchar", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Payments in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Client_Payment", Storage="_Payments", ThisKey="Id", OtherKey="ClientId", DeleteRule="NO ACTION")]
        public EntitySet<Payment> Payments
        {
            get
            {
                return this._Payments;
            }
            set
            {
                this._Payments.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Payments(Payment entity)
        {
            this.SendPropertyChanging("Payments");
            entity.Client = this;
        }
    
        private void detach_Payments(Payment entity)
        {
            this.SendPropertyChanging("Payments");
            entity.Client = null;
        }
    }

    /// <summary>
    /// There are no comments for PgEFModel.Payment in the schema.
    /// </summary>
    [Table(Name = @"public.payment")]
    public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.DateTime _CreatedAt;

        private System.Nullable<int> _ClientId;

        private System.Nullable<decimal> _Amount = 0m;
        #pragma warning restore 0649

        private EntityRef<Client> _Client;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnCreatedAtChanging(System.DateTime value);
        partial void OnCreatedAtChanged();
        partial void OnClientIdChanging(System.Nullable<int> value);
        partial void OnClientIdChanged();
        partial void OnAmountChanging(System.Nullable<decimal> value);
        partial void OnAmountChanged();
        #endregion

        public Payment()
        {
            this._Client  = default(EntityRef<Client>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "serial NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreatedAt in the schema.
        /// </summary>
        [Column(Name = @"created_at", Storage = "_CreatedAt", CanBeNull = false, DbType = "timestamp NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime CreatedAt
        {
            get
            {
                return this._CreatedAt;
            }
            set
            {
                if (this._CreatedAt != value)
                {
                    this.OnCreatedAtChanging(value);
                    this.SendPropertyChanging();
                    this._CreatedAt = value;
                    this.SendPropertyChanged("CreatedAt");
                    this.OnCreatedAtChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ClientId in the schema.
        /// </summary>
        [Column(Name = @"client_id", Storage = "_ClientId", DbType = "int4", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ClientId
        {
            get
            {
                return this._ClientId;
            }
            set
            {
                if (this._ClientId != value)
                {
                    if (this._Client.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnClientIdChanging(value);
                    this.SendPropertyChanging();
                    this._ClientId = value;
                    this.SendPropertyChanged("ClientId");
                    this.OnClientIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        [Column(Name = @"amount", Storage = "_Amount", DbType = "decimal", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<decimal> Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this.SendPropertyChanging();
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Client in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Client_Payment", Storage="_Client", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true)]
        public Client Client
        {
            get
            {
                return this._Client.Entity;
            }
            set
            {
                Client previousValue = this._Client.Entity;
                if ((previousValue != value) || (this._Client.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Client.Entity = null;
                        previousValue.Payments.Remove(this);
                    }
                    this._Client.Entity = value;
                    if (value != null)
                    {
                        this._ClientId = value.Id;
                        value.Payments.Add(this);
                    }
                    else
                    {
                        this._ClientId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Client");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
